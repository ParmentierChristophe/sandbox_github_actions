name: Deploy DEV (Simulation)

on:
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest

    outputs:
      changed_files: ${{ steps.get_changes.outputs.changed_files }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get changed files
        id: get_changes
        shell: bash
        run: |
          git diff --name-only HEAD^ HEAD > changed_files.txt
          echo "Changed files detected:"
          cat changed_files.txt
          # DÃ©finition de la sortie 'changed_files'
          echo "changed_files=$(cat changed_files.txt)" >> $GITHUB_OUTPUT

  simulate_push_jfrog:
    needs: prepare
    strategy:
      matrix:
        name: ['api', 'docs']
          
    name: Simulate build and push for ${{ matrix.name }}
    runs-on: ubuntu-latest

    steps:
      - name: Define service path
        id: define_path
        shell: bash
        run: |
          if [ "${{ matrix.name }}" == "api" ]; then
            echo "service_path=api/" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.name }}" == "docs" ]; then
            echo "service_path=docs/" >> $GITHUB_OUTPUT
          fi

      - name: Display Paths and Changed Files
        shell: bash
        run: |
          echo "Service path: ${{ steps.define_path.outputs.service_path }}"
          echo "Changed files: ${{ needs.prepare.outputs.changed_files }}"

      - name: Check if service was modified
        id: check_modifications
        shell: bash
        run: |
          echo "Checking if ${{ matrix.name }} has been modified..."
          if echo "${{ needs.prepare.outputs.changed_files }}" | grep -q "${{ steps.define_path.outputs.service_path }}"; then
            echo "Changes detected for ${{ matrix.name }}"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected for ${{ matrix.name }}"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Simulate building Docker image
        if: steps.check_modifications.outputs.should_deploy == 'true'
        run: |
          echo "Building Docker image for ${{ matrix.name }}"
          echo "This would execute: docker build -f ./apps/${{ matrix.name }}/Dockerfile ."
      
      - name: Simulate pushing Docker image to JFrog
        if: steps.check_modifications.outputs.should_deploy == 'true'
        run: |
          echo "Simulating push of Docker image for ${{ matrix.name }} to Docker"
          echo "Image name: ${{ matrix.name }}"
          echo "Repository: docker"
